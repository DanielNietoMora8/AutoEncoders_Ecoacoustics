import torch.nn as nn
from enum import Enum


class LinearAE(nn.Module):

    """
    Linear layer autoencoder made to reconstruct 1d signals corresponding to ecoacustics audio.
    """

    def __init__(self):
        super().__init__()
        self.encoder = nn.Sequential(
            nn.Linear(28 * 28, d),
            nn.Tanh()
        )

        self.decoder = nn.Sequential(
            nn.Linear(d, 28 * 28),
            nn.Tanh()
        )

    def forward(self, y):
        h = self.encoder(y)
        y_hat = self.decoder(h)
        return y_hat

    def forward(self, x):
        """
        Method to compute a signal output based on the performed model.

        :param x: Input signal as a tensors.
        :type x: torch.tensor
        :return: Reconstructed signal
        """
        encoded = self.encoder(x)
        decoded = self.decoder(encoded)
        return decoded


class ConvAE(nn.Module):

    """
    Convolutional autoencoder made to reconstruct the audios spectrograms generated by the EcoDataTesis dataloader.
    """

    def __init__(self):
        """
        Constructor of the convolutional autoencoder model.
        """
        super().__init__()
        # TODO: To design the final architechture considering the spectrograms sizes.
        # TODO: To correct the current sizes of the decoder.

        self.encoder = nn.Sequential(
            nn.Conv2d(1, 256, (2, 256), stride=(1, 16), padding=0), # N, 256, 128, 4002
            nn.ReLU(),
            nn.Conv2d(256, 512, (2, 256), stride=(1, 16), padding=0)  # N, 512, 127, 235
             )
        self.decoder = nn.Sequential(  # This is like go in opposite direction respect the encoder
            nn.ConvTranspose2d(512, 256, (2, 256), stride=(1, 16), padding=0, output_padding=0),  # N, 32, 7, 7
            nn.ReLU(),
            nn.ConvTranspose2d(256, 1, (2, 256), stride=(1, 16), padding=0, output_padding=0),  # N, 32, 7, 7
            nn.Sigmoid()

        )

    def forward(self, x):
        """
        Method to compute an image output based on the performed model.

        :param x: Input spectrogram images as tensors.
        :type x: torch.tensor
        :return: Reconstructed images
        """
        print("---------------------------------------------------")
        print(f"x_shape:{x.shape}")
        encoded = self.encoder(x)
        print(encoded.shape)
        decoded = self.decoder(encoded)
        print(decoded.shape)
        return decoded


class VAE(nn.Module):
    def __init__(self):
        super(VAE, self).__init__()

        self.encoder = nn.Sequential(
            nn.Linear(784, d**2),
            nn.ReLU(),
            nn.Linear(d**2, d*2),
        )

        self.decoder = nn.Sequential(
            nn.Linear(d, d**2),
            nn.ReLU(),
            nn.Linear(d**2, 784),
            nn.Sigmoid()
        )

    def reparameterize(self, mu, logvar):
        if self.training:
            std = logvar.mul(0.5).exp_()
            eps = std.data.new(std.size()).normal_()
            return eps.mul(std).add_(mu)
        else:
            return mu

    def forward(self, y):
        mu_logvar = self.encoder(y.view(-1, 784)).view(-1, 2, d)
        mu = mu_logvar[:, 0, :]
        logvar = mu_logvar[:, 1, :]
        z = self.reparameterize(mu, logvar)
        return self.decoder(z), mu, logvar


class ModelName(str, Enum):

    """
    ModelName is an enumeration and it contains the model names as enumeration members. For more information
    visit the nex website https://docs.python.org/3/library/enum.html
    """
    LinearAE = "AE"
    ConvAE = "ConvAE"
    VAE = "VAE"

    #swagger postman insomnia


